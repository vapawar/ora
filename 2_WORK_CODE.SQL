--RULE 1 - COMMISSON CHECK ----
CREATE OR REPLACE TRIGGER SALES_PERSON_CP
BEFORE INSERT
ON EMPLOYEES_VPZ
FOR EACH ROW
WHEN (NEW.JOB_ID IN ('SALES MANAGER','SALES REPRESENTATIVE'))
DECLARE
CP_EXCEPT EXCEPTION;
BEGIN
IF :NEW.COMMISSION_PCT <=0 THEN
RAISE CP_EXCEPT;
END IF;
EXCEPTION
WHEN CP_EXCEPT THEN
RAISE_APPLICATION_ERROR(-20002,'COMMISSON PERCENT CAN NOT BE ZERO FOR SALES PERSON');
END;

INSERT INTO EMPLOYEES_VPZ VALUES(100003,'AMAN','DHUMAL','AMAN@EMAIL.COM','9898989802','12-MAR-2015','SALES MANAGER',940000,00.00,100004,80);








--RULE 2 - PRESIDENT CHECK ---------
CREATE OR REPLACE TRIGGER PRES_CHECK
BEFORE INSERT
ON EMPLOYEES_VPZ
FOR EACH ROW
WHEN (NEW.JOB_ID='PRESIDENT')
DECLARE
PNUM NUMBER(2);
PRES_NUM_ERROR EXCEPTION;
BEGIN
SELECT COUNT (*) INTO PNUM FROM EMPLOYEES_VPZ WHERE JOB_ID='PRESIDENT';
IF PNUM != 0 THEN
RAISE PRES_NUM_ERROR;
END IF;
EXCEPTION
WHEN PRES_NUM_ERROR THEN
RAISE_APPLICATION_ERROR(-20002,'CAN NOT HAVE MORE THAN ONE PRESIDENT.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR IN INSERTING DATA.');
END;

INSERT INTO EMPLOYEES_VPZ VALUES(100033,'AMAN','DHUMAL','AMAN@EMAIL.COM','9898989802','12-MAR-2015','PRESIDENT',940000,00.00,100001,80);
SELECT * FROM EMPLOYEES_VPZ;






--RULE 3 - MANAGER CHECK --------------
CREATE OR REPLACE TRIGGER MANGER_CHECK
BEFORE INSERT
ON EMPLOYEES_VPZ
FOR EACH ROW
DECLARE
EMPS_COUNT NUMBER(2);
TOO_EMPS EXCEPTION;
BEGIN
SELECT COUNT (*) INTO EMPS_COUNT FROM EMPLOYEES_VPZ WHERE MGR_ID=:NEW.MGR_ID;
IF EMPS_COUNT = 5 THEN
RAISE TOO_EMPS;
END IF;
EXCEPTION
WHEN TOO_EMPS THEN
RAISE_APPLICATION_ERROR(-20002,'MANAGER CAN NOT HAVE MORE THAN 5 EMPLOYESS.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR OCCURRED.');
END;

INSERT INTO EMPLOYEES_VPZ VALUES(100003,'AMAN','DHUMAL','AMAN@EMAIL.COM','9898989802','12-MAR-2015','SUPPORT MANAGER',940000,00.00,100002,80);
INSERT INTO EMPLOYEES_VPZ VALUES(100003,'AMAN','DHUMAL','AMAN@EMAIL.COM','9898989802','12-MAR-2015','SUPPORT MANAGER',940000,00.00,100004,80);






--RULE 4_5 - SALARY CHECK ---------
CREATE OR REPLACE TRIGGER SAL_CHECK
BEFORE UPDATE OF SALARY 
ON EMPLOYEES_VPZ
FOR EACH ROW
WHEN (NEW.SALARY <= OLD.SALARY)
DECLARE
NSAL NUMBER(12,2):= :NEW.SALARY;
OSAL NUMBER(12,2):= :OLD.SALARY;
SAME_SAL EXCEPTION;
DEC_SAL EXCEPTION;
BEGIN
IF OSAL - NSAL  = 0 THEN
RAISE SAME_SAL;
ELSE
RAISE DEC_SAL;
END IF;
EXCEPTION
WHEN SAME_SAL THEN
RAISE_APPLICATION_ERROR(-20002,'SALARY CAN NOT BE INCREASED WITH SAME SALARY.');
WHEN DEC_SAL THEN
RAISE_APPLICATION_ERROR(-20002,'SALARY CAN NOT BE DECREASED.');
END;

UPDATE EMPLOYEES_VPZ SET SALARY=360000 WHERE EMP_ID=100017;
UPDATE EMPLOYEES_VPZ SET SALARY=380000 WHERE EMP_ID=100017;
SELECT * FROM EMPLOYEES_VPZ;







--RULE 6 - LOCATION BONUS ------------
CREATE OR REPLACE TRIGGER DEPT_CHLOC
BEFORE UPDATE OF LOCATION_ID
ON DEPARTMENTS_VPZ
FOR EACH ROW
WHEN (NEW.LOCATION_ID != OLD.LOCATION_ID)
DECLARE
DNUM NUMBER:= :NEW.DEPT_ID;
BEGIN
DEPT_MOVE_SAL_INCREASE(DNUM);
END;
----------------------------------------------------------------
CREATE OR REPLACE  PROCEDURE DEPT_MOVE_SAL_INCREASE(DNUM NUMBER)
IS
BEGIN
UPDATE EMPLOYEES_VPZ SET SALARY=SALARY+SALARY*0.02  WHERE DEPT_ID=DNUM;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR OCCURED');
END;
--------------------------------------
DELETE FROM DEPARTMENTS_VPZ;
DELETE FROM EMPLOYEES_VPZ;
SELECT * FROM DEPARTMENTS_VPZ;
SELECT * FROM EMPLOYEES_VPZ;
UPDATE DEPARTMENTS_VPZ SET LOCATION_ID=1600 WHERE DEPT_ID=90;
